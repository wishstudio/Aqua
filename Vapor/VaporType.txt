using Core;

class Type
{
	public abstract CanImplicitlyConvertTo(Type type) -> bool;

	public abstract ToString() -> String;

	public abstract String Suffix { get; }

	public virtual Type StackType
	{
		get { return this; }
	}

	/* HACK: bool */
	public Equals(Type type) -> int32
	{
		return ToString().Equals(type.ToString());
	}

	public static Type Unit, UnitPointer, Bool, Int8, UInt8, Int16, UInt16, Char, Int32, UInt32, Int;

	static ()
	{
		Type.Unit = new UnitType();
		Type.UnitPointer = new PointerType(Type.Unit);
		Type.Bool = new BoolType();
		Type.Int8 = new Int8Type();
		Type.UInt8 = new UInt8Type();
		Type.Int16 = new Int16Type();
		Type.UInt16 = new UInt16Type();
		Type.Char = new CharType();
		Type.Int32 = new Int32Type();
		Type.UInt32 = new UInt32Type();
		Type.Int = new IntType();
	}
}

class UnitType: Type
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return false;
	}

	public override ToString() -> String
	{
		return "unit";
	}

	public override String Suffix
	{
		get { throw new InvalidOperationException(); }
	}

	public override Type StackType
	{
		get { throw new InvalidOperationException(); }
	}
}

class PrimitiveType: Type
{
}

class BoolType: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is BoolType;
	}

	public override ToString() -> String
	{
		return "bool";
	}

	public override String Suffix
	{
		get { return "ub"; }
	}

	public override Type StackType
	{
		get { return Type.Int32; }
	}
}

class Int8Type: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is Int8Type || type is Int16Type || type is Int32Type;
	}

	public override ToString() -> String
	{
		return "int8";
	}

	public override String Suffix
	{
		get { return "b"; }
	}

	public override Type StackType
	{
		get { return Type.Int32; }
	}
}

class UInt8Type: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is UInt8Type || type is Int16Type || type is UInt16Type || type is Int32Type || type is UInt32Type;
	}

	public override ToString() -> String
	{
		return "uint8";
	}

	public override String Suffix
	{
		get { return "ub"; }
	}

	public override Type StackType
	{
		get { return Type.UInt32; }
	}
}

class Int16Type: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is Int16Type || type is Int32Type;
	}

	public override ToString() -> String
	{
		return "int16";
	}

	public override String Suffix
	{
		get { return "w"; }
	}

	public override Type StackType
	{
		get { return Type.Int32; }
	}
}

class UInt16Type: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is UInt16Type || type is Int32Type || type is UInt32Type;
	}

	public override ToString() -> String
	{
		return "uint16";
	}

	public override String Suffix
	{
		get { return "uw"; }
	}

	public override Type StackType
	{
		get { return Type.UInt32; }
	}
}

class CharType: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is CharType;
	}

	public override ToString() -> String
	{
		return "char";
	}

	public override String Suffix
	{
		get { return "uw"; }
	}

	public override Type StackType
	{
		get { return Type.UInt32; }
	}
}

class Int32Type: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is Int32Type;
	}

	public override ToString() -> String
	{
		return "int32";
	}

	public override String Suffix
	{
		get { return "i"; }
	}
}

class UInt32Type: PrimitiveType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is UInt32Type;
	}

	public override ToString() -> String
	{
		return "uint32";
	}

	public override String Suffix
	{
		get { return "u"; }
	}
}

class ReferenceType: Type
{
}

class IntType: ReferenceType
{
	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		/* FIXME: Temporary workaround */
		return type is IntType || type is ClassType || type is ArrayType;
	}

	public override ToString() -> String
	{
		return "int";
	}

	public override String Suffix
	{
		get { return "a"; }
	}
}

class PointerType: ReferenceType
{
	private Type valueType;

	public (Type valueType)
	{
		this.valueType = valueType;
	}

	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		if (type is PointerType &&
			([PointerType] type).ValueType.Equals(valueType) > 0 || ([PointerType] type).ValueType is UnitType)
			return true;
		/* HACK: Temporary workaround */
		if (type is IntType)
			return true;
		return false;
	}

	public override ToString() -> String
	{
		return valueType.ToString() + "*";
	}

	public override String Suffix
	{
		get { return "a"; }
	}

	public Type ValueType
	{
		get { return valueType; }
	}
}

class ArrayType: ReferenceType
{
	private Type elementType;

	public (Type elementType)
	{
		this.elementType = elementType;
	}

	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		return type is ArrayType && ([ArrayType] type).ElementType.Equals(elementType) > 0;
	}

	public override ToString() -> String
	{
		return elementType.ToString() + "[]";
	}

	public override String Suffix
	{
		get { return "a"; }
	}

	public Type ElementType
	{
		get { return elementType; }
	}
}

class ClassType: ReferenceType
{
	private Class classObject;

	public (Class classObject)
	{
		this.classObject = classObject;
	}

	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		if (type is ClassType)
		{
			Class dst = ([ClassType] type).Class;
			Class c = classObject;
			while (c != null)
			{
				/* HACK: object pointer comparison */
				if (c.name.Equals(dst.name))
					return true;
				c = c.baseClass;
			}
		}
		return false;
	}

	public override ToString() -> String
	{
		return classObject.name;
	}

	public override String Suffix
	{
		get { return "a"; }
	}

	public Class Class
	{
		get { return classObject; }
	}
}

class ValueType: Type
{
	private Class classObject;

	public (Class classObject)
	{
		this.classObject = classObject;
	}

	public override CanImplicitlyConvertTo(Type type) -> bool
	{
		/* HACK: object pointer comparison */
		return type is ValueType && ([ValueType] type).classObject.name.Equals(classObject.name);
	}

	public override ToString() -> String
	{
		return classObject.name;
	}

	public override String Suffix
	{
		get { return "v"; }
	}

	public Class Class
	{
		get { return classObject; }
	}
}
