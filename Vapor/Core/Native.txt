namespace Core.Native;

class Converter
{
	static public ToWCharPtr(Core.String string) -> int
	{
		return string.RawData;
	}
}

class Memory
{
	static public internal CopyMemory(int destination, int source, int32 size);
	static public internal MoveMemory(int destination, int source, int32 size);
	static public internal AllocateMemory(int32 size) -> int data;
	static public internal FreeMemory(int data);
}

class Win32
{
	/* Debug helper */
	public static native DebugBreak();
	[stdcall, "kernel32.dll", "DebugBreak"]

	/* File functions */
	public static native CreateFile(
		int lpFileName,
		int32 dwDesiredAccess,
		int32 dwShareMode,
		int lpSecurityAttributes, /* TODO */
		int32 dwCreationDisposition,
		int32 dwFlagsAndAttributes,
		int hTemplateFile
	) -> int;
	[stdcall, "kernel32.dll", "CreateFileW"]

	public static native ReadFile(
		int hFile,
		int lpBuffer,
		int32 nNumberOfBytesToRead,
		int lpNumberOfBytesRead,
		int lpOverlapped
	) -> int32;
	[stdcall, "kernel32.dll", "ReadFile"]

	public static native WriteFile(
		int hFile,
		int lpBuffer,
		int32 nNumberOfBytesToWrite,
		int lpNumberOfBytesWritten,
		int lpOverlapped
	) -> int32;
	[stdcall, "kernel32.dll", "WriteFile"]

	public static native CloseHandle(
		int hObject
	) -> int32;
	[stdcall, "kernel32.dll", "CloseHandle"]

	/* Console functions */
	public static native GetConsoleOutputCP() -> int32;
	[stdcall, "kernel32.dll", "GetConsoleOutputCP"]

	public static native SetConsoleOutputCP(int32 wCodePageID);
	[stdcall, "kernel32.dll", "SetConsoleOutputCP"]

	public static native GetStdHandle(int32 nStdHandle) -> int;
	[stdcall, "kernel32.dll", "GetStdHandle"]

	public static native SetConsoleTitle(int lpConsoleTitle) -> int32;
	[stdcall, "kernel32.dll", "SetConsoleTitleW"]

	public static native WriteConsole(
		int hConsoleOutput,
		int lpBuffer,
		int32 nNumberOfCharsToWrite,
		int lpNumberOfCharsWritten,
		int lpReserved
	) -> int32;
	[stdcall, "kernel32.dll", "WriteConsoleW"]
}
