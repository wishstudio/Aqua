class MethodReference
{
	public Location location;
	public int32 regid;
	public Vector methods;

	public (Location location, int32 regid, Vector methods)
	{
		this::location = location;
		this::regid = regid;
		this::methods = methods;
	}
}

class Value
{
	public Location location;
	public Type type;

	/* HACK: bool */
	public virtual CanImplicitlyConvertTo(Type dst) -> int32
	{
		return type::CanImplicitlyConvertTo(dst);
	}

	public abstract GetNextFreeRegister(int32 freereg) -> int32;

	public abstract ToRegister(Compiler compiler, int32 regid, int32 freereg) -> RegisterValue;

	public ToFreeRegister(Compiler compiler, int32 freereg) -> RegisterValue
	{
		return ToRegister(compiler, freereg, freereg);
	}

	public virtual EnsureRegister(Compiler compiler, int32 freereg) -> RegisterValue
	{
		return ToRegister(compiler, freereg, freereg);
	}

	/* Ensure a value occupies a single register slot at most */
	public EnsureSingleSlot(Compiler compiler, int32 freereg) -> Value
	{
		if (this is ImmediateValue)
			return this;
		return EnsureRegister(compiler, freereg);
	}

	/* TODO: super function call */
	/* Ensure value is of given type, convert it otherwise */
	public virtual ToTyped(Compiler compiler, int32 freereg, Type dst) -> Value
	{
		Type stackType = type::StackType;
		/* HACK: Temporary workaround */
		if (type is PointerType && dst is IntType)
			return this;
		else if (stackType::Equals(dst) > 0  || type::Equals(dst) > 0)
			return this;
		else if (type is PrimitiveType && dst is PrimitiveType)
		{
			/* TODO: Maybe we could support bool -> [u]int* conversions */
			if (type is BoolValue || dst is BoolType)
				throw new CompilerException("Invalid type conversion", location);
			/* TODO: Maybe we could cut off some unnecessary convertions */
			RegisterValue ret = ToFreeRegister(compiler, freereg);
			compiler::AddCode("conv\t" + dst::ToString() + " $" + freereg + ", "
				+ stackType::ToString() + " $" + ret::regid);
			ret::type = dst;
			return ret;
		}
		/* HACK: not */
		else
		{
			if (type is PrimitiveType || dst is PrimitiveType)
				throw new CompilerException(
					"Cannot convert \"" + type::ToString() + "\" to \"" + dst::ToString() + "\"",
					location
				);

			/* Object cast */
			/* TODO */
			if (type::CanImplicitlyConvertTo(dst) > 0)
			{
				/* FIXME: Clone */
				this::type = type;
				return this;
			}
			else
			{
				RegisterValue ret = ToFreeRegister(compiler, freereg);
				compiler::AddCode("cast\t$" + freereg + ", $" + ret::regid + ", " + dst::ToString());
				ret::type = type;
				return ret;
			}
		}
	}

	/* Convert value to a given type and move in to given register */
	public ToTypedRegister(Compiler compiler, int32 regid, int32 freereg, Type type) -> RegisterValue
	{
		return ToTyped(compiler, freereg, type)::ToRegister(compiler, regid, freereg);
	}

	public EnsureTypedRegister(Compiler compiler, int32 freereg, Type type) -> RegisterValue
	{
		return ToTyped(compiler, freereg, type)::EnsureRegister(compiler, freereg);
	}

	public ToLValue(Compiler compiler, LValue lvalue, int32 freereg)
	{
		if (CanImplicitlyConvertTo(lvalue::type) == 0)
			throw new CompilerException(
				"Cannot implicitly convert to \"" + lvalue::type::ToString() + "\"",
				location
			);
		lvalue::AssignValue(compiler, this, freereg);
	}

	/* HACK: bool */
	public virtual ToJumpTarget(Compiler compiler, int32 freereg, int32 jtarget, int32 jtrue)
		-> JumpTargetValue
	{
		RegisterValue value = EnsureTypedRegister(compiler, freereg, Type::Bool);
		Core.String inst;
		if (jtrue > 0) /* jump on true */
			inst = "jnzi";
		else /* jump on false */
			inst = "jzi";
		compiler::AddCode(inst + "\t$" + value::regid + ", " + compiler::GetLabelName(jtarget));
		return new JumpTargetValue(location, jtarget);
	}
}

class ImmediateValue: Value
{
	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		return freereg;
	}
}

/* HACK: bool */
class BoolValue: ImmediateValue
{
	public int32 value;

	public (Location location, int32 value)
	{
		this::location = location;
		this::value = value;
		this::type = Type::Bool;
	}

	public override CanImplicitlyConvertTo(Type type) -> int32
	{
		if (type is BoolType)
			return 1;
		return 0;
	}

	public override ToRegister(Compiler compiler, int32 regid, int32 freereg) -> RegisterValue
	{
		compiler::AddCode("ldi\t$" + regid + ", " + value);
		return new RegisterValue(location, regid, Type::Bool);
	}

	public override ToTyped(Compiler compiler, int32 freereg, Type type) -> Value
	{
		if (type is BoolType)
			return ToFreeRegister(compiler, freereg);
		else
			throw new CompilerException("Invalid type conversion.", location);
	}
}

class NullValue: ImmediateValue
{
	public (Location location)
	{
		this::location = location;
		this::type = Type::Int;
	}

	public override CanImplicitlyConvertTo(Type type) -> int32
	{
		if (type is IntType || type is ClassType || type is PointerType)
			return 1;
		return 0;
	}

	public override ToRegister(Compiler compiler, int32 regid, int32 freereg) -> RegisterValue
	{
		/* TODO */
		compiler::AddCode("ldnull\t$" + regid);
		return new RegisterValue(location, regid, Type::Int);
	}

	public override ToTyped(Compiler compiler, int32 freereg, Type type) -> Value
	{
		if (type is IntType || type is ClassType || type is PointerType)
		{
			compiler::AddCode("ldnull\t$" + freereg);
			return new RegisterValue(location, freereg, type);
		}
		else
			throw new CompilerException("Invalid type conversion.", location);
	}
}

class IntegerValue: ImmediateValue
{
	Core.String value;

	public (Location location, Core.String value)
	{
		this::location = location;
		/* TODO */
		this::value = value;
		this::type = Type::Int32;
	}

	public override CanImplicitlyConvertTo(Type type) -> int32
	{
		/* TODO */
		if (type is Int8Type || type is UInt8Type || type is Int16Type || type is UInt16Type
			|| type is Int32Type || type is UInt32Type)
			return 1;
		return 0;
	}

	public override ToRegister(Compiler compiler, int32 regid, int32 freereg) -> RegisterValue
	{
		/* TODO */
		compiler::AddCode("ldi\t$" + regid + ", " + value);
		return new RegisterValue(location, regid, Type::Int32);
	}

	public override ToTyped(Compiler compiler, int32 freereg, Type type) -> Value
	{
		/* TODO: Super call */
		return this;
	}
}

class JumpTargetValue: Value
{
	public int32 labelId;

	public (Location location, int32 labelId)
	{
		this::location = location;
		this::labelId = labelId;
		this::type = Type::Bool;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		/* TODO: Is this okay? */
		return freereg;
	}

	public override ToRegister(Compiler compiler, int32 regid, int32 freereg) -> RegisterValue
	{
		/* TODO */
		/* Default: jtrue == 0 */
		compiler::AddCode("ldi\t$" + regid + ", 1");
		compiler::AddCode("jmp\t" + compiler::GetLabelName(compiler::currentLabelId));
		compiler::AddLabel(labelId);
		compiler::AddCode("ldi\t$" + regid + ", 0");
		compiler::AddLabel(compiler::GetNextLabelId());
		return new RegisterValue(location, regid, Type::Bool);
	}

	public override ToJumpTarget(Compiler compiler, int32 freereg, int32 jtarget, int32 jtrue)
		-> JumpTargetValue
	{
		return this;
	}
}

class RegisterValue: Value
{
	public int32 regid;

	public (Location location, int32 regid, Type type)
	{
		this::location = location;
		this::regid = regid;
		this::type = type;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		if (freereg == regid)
			return freereg + 1;
		return freereg;
	}

	public override EnsureRegister(Compiler compiler, int32 freereg) -> RegisterValue
	{
		return this;
	}

	public override ToRegister(Compiler compiler, int32 dst, int32 freereg) -> RegisterValue
	{
		if (regid == dst)
			return this;
		compiler::AddCode("ld" + type::StackType::Suffix + "\t$" + dst + ", $" + regid);
		return new RegisterValue(location, dst, type);
	}
}

class LValue: Value
{
	/* Assign a value to this lvalue, caller ensures type consistent */
	public virtual AssignValue(Compiler compiler, Value value, int32 freereg) {}
}

class VariableValue: LValue
{
	public int32 regid;

	public (Location location, int32 regid, Type type)
	{
		this::location = location;
		this::regid = regid;
		this::type = type;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		if (freereg == regid)
			return freereg + 1;
		return freereg;
	}

	public override EnsureRegister(Compiler compiler, int32 freereg) -> RegisterValue
	{
		return new RegisterValue(location, regid, type);
	}

	public override ToRegister(Compiler compiler, int32 dst, int32 freereg) -> RegisterValue
	{
		if (regid == dst)
			return this;
		compiler::AddCode("ld" + type::StackType::Suffix + "\t$" + dst + ", $" + regid);
		return new RegisterValue(location, dst, type);
	}

	public override AssignValue(Compiler compiler, Value value, int32 freereg)
	{
		value::ToTypedRegister(compiler, regid, freereg, type);
	}
}

class DerefValue: LValue
{
	public int32 regid;

	public (Location location, int32 regid, Type type)
	{
		this::location = location;
		this::regid = regid;
		this::type = type;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		if (freereg == regid)
			return freereg + 1;
		return freereg;
	}

	public override ToRegister(Compiler compiler, int32 dst, int32 freereg) -> RegisterValue
	{
		compiler::AddCode("ldi" + type::Suffix + "\t$" + dst + ", ($" + regid + ")");
		return new RegisterValue(location, dst, type);
	}

	public override AssignValue(Compiler compiler, Value value, int32 freereg)
	{
		RegisterValue v = value::EnsureTypedRegister(compiler, freereg, type);
		compiler::AddCode("ldi" + type::Suffix + "\t($" + regid + "), $" + v::regid);
	}
}

class FieldValue: LValue
{
	public int32 regid;
	public Field field;

	public (Location location, int32 regid, Field field, Type type)
	{
		this::location = location;
		this::regid = regid;
		this::field = field;
		this::type = type;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		if (freereg == regid)
			return freereg + 1;
		return freereg;
	}

	public override ToRegister(Compiler compiler, int32 dst, int32 freereg) -> RegisterValue
	{
		if (field::modifier & Modifier::Static > 0)
			compiler::AddCode("lds" + type::Suffix + "\t$" + dst + ", "
				+ field::classObject::name + "::" + field::name);
		else
			compiler::AddCode("ldf" + type::Suffix + "\t$" + dst + ", $"
				+ regid + ", " + field::classObject::name + "::" + field::name);
		return new RegisterValue(location, dst, type);
	}

	public override AssignValue(Compiler compiler, Value value, int32 freereg)
	{
		RegisterValue v = value::EnsureTypedRegister(compiler, freereg, type);
		if (field::modifier & Modifier::Static > 0)
			compiler::AddCode("lds" + type::Suffix + "\t" + field::classObject::name + "::" + field::name
				+ ", $" + v::regid);
		else
			compiler::AddCode("ldf" + type::Suffix + "\t$" + regid + ", "
				+ field::classObject::name + "::" + field::name + ", $" + v::regid);
	}
}

class PropertyValue: LValue
{
	public int32 regid;
	public Property property;

	public (Location location, int32 regid, Property property, Type type)
	{
		if (property::modifier & Modifier::Override > 0)
			throw new Core.InvalidOperationException();
		this::location = location;
		this::regid = regid;
		this::property = property;
		this::type = type;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		if (freereg == regid)
			return freereg + 1;
		return freereg;
	}

	public override ToRegister(Compiler compiler, int32 dst, int32 freereg) -> RegisterValue
	{
		return EnsureRegister(compiler, freereg)::ToRegister(compiler, dst, freereg);
	}

	public override EnsureRegister(Compiler compiler, int32 freereg) -> RegisterValue
	{
		if (property::getter == null)
			throw new CompilerException("Property cannot be read.", location);

		int32 firstreg;
		if (property::modifier & Modifier::Static > 0)
			firstreg = freereg + 1;
		else
		{
			compiler::AddCode("lda\t$" + freereg + ", $" + regid);
			firstreg = freereg + 1;
		}
		Core.String inst;
		if (property::getter::modifier & Modifier::Virtual > 0 || property::getter::modifier & Modifier::Abstract > 0)
			inst = "callv";
		else
			inst = "call";
		compiler::AddCode(inst + "\t$" + freereg + ", " + compiler::GetMethodSignature(property::getter));
		return new RegisterValue(location, freereg, type);
	}

	public override AssignValue(Compiler compiler, Value value, int32 freereg)
	{
		if (property::setter == null)
			throw new CompilerException("Property cannot be written.", location);

		int32 firstreg;
		if (property::modifier & Modifier::Static > 0)
			firstreg = freereg;
		else
		{
			compiler::AddCode("lda\t$" + freereg + ", $" + regid);
			firstreg = freereg + 1;
		}
		RegisterValue v = value::ToTypedRegister(compiler, firstreg, firstreg, type);
		Core.String inst;
		if (property::setter::modifier & Modifier::Virtual > 0 || property::setter::modifier & Modifier::Abstract > 0)
			inst = "callv";
		else
			inst = "call";
		compiler::AddCode(inst + "\t$" + freereg + ", " + compiler::GetMethodSignature(property::setter));
	}
}

class ArrayElementValue: LValue
{
	public int32 regid, regid2;

	public (Location location, int32 regid, int32 regid2, Type type)
	{
		this::location = location;
		this::regid = regid;
		this::regid2 = regid2;
		this::type = type;
	}

	public override GetNextFreeRegister(int32 freereg) -> int32
	{
		if (freereg == regid || freereg == regid2)
			if (freereg + 1 == regid || freereg + 1 == regid2)
				return freereg + 2;
			else
				return freereg + 1;
		return freereg;
	}

	public override ToRegister(Compiler compiler, int32 dst, int32 freereg) -> RegisterValue
	{
		compiler::AddCode("lde" + type::Suffix + "\t$" + dst + ", $" + regid + "($" + regid2 + ")");
		return new RegisterValue(location, dst, type);
	}

	public override AssignValue(Compiler compiler, Value value, int32 freereg)
	{
		RegisterValue v = value::EnsureTypedRegister(compiler, freereg, type);
		compiler::AddCode("lde" + type::Suffix + "\t$" + regid + "($" + regid2 + "), $" + v::regid);
	}
}
