using Core;

/* Vapor Parser
 * Code -> AST
 */
class Parser
{
	public Vector classes;
	public Namespace root;

	private Lexer lex;
	private String currentFileName;

	public ()
	{
		classes = new Vector();
		root = new Namespace("", null);
	}

	public GetCurrentLocation() -> Location
	{
		Location location = new Location();
		location.fileName = currentFileName;
		location.lineNumber = lex.lineNumber;
		return location;
	}

	public Parse(String fileName)
	{
		try
		{
			currentFileName = fileName;
			lex = new Lexer(fileName);
			lex.Next();
			ParseFile();
		}
		catch (ParserException e)
			throw new CompilerException("Parser error.", GetCurrentLocation());
		finally
		{
			if (lex != null)
				lex.Dispose();
		}
	}

	private ParseModifier() -> int32
	{
		int32 modifier = 0;
		while (lex.token == Token.Ident)
		{
			int32 m = Modifier.Parse(lex.ident);
			if (m == 0)
				return modifier;
			modifier = modifier | m;
			lex.Next();
		}
		return modifier;
	}

	private ParseCallingConvention() -> int32
	{
		lex.Assert(Token.Ident);
		int32 cc = CallingConvention.Parse(lex.ident);
		lex.Next();
		if (cc == 0)
			throw new UnexpectedTokenException();
		else
			return cc;
	}

	private TryParseType() -> Node
	{
		Location location = GetCurrentLocation();
		if (lex.token != Token.Ident)
			return null;

		Node type;
		if (lex.ident.Equals("bool") > 0)
			type = new PrimitiveTypeNode(location, Type.Bool);
		else if (lex.ident.Equals("int8") > 0)
			type = new PrimitiveTypeNode(location, Type.Int8);
		else if (lex.ident.Equals("uint8") > 0)
			type = new PrimitiveTypeNode(location, Type.UInt8);
		else if (lex.ident.Equals("int16") > 0)
			type = new PrimitiveTypeNode(location, Type.Int16);
		else if (lex.ident.Equals("uint16") > 0)
			type = new PrimitiveTypeNode(location, Type.UInt16);
		else if (lex.ident.Equals("int32") > 0)
			type = new PrimitiveTypeNode(location, Type.Int32);
		else if (lex.ident.Equals("uint32") > 0)
			type = new PrimitiveTypeNode(location, Type.UInt32);
		else if (lex.ident.Equals("char") > 0)
			type = new PrimitiveTypeNode(location, Type.Char);
		else if (lex.ident.Equals("int") > 0)
			type = new PrimitiveTypeNode(location, Type.Int);
		else
			type = new IdentNode(location, lex.ident);

		for (;;)
		{
			lex.Next();
			if (lex.token == Token.Array)
				type = new ArrayTypeNode(location, type);
			else if (lex.token == Token.Mul)
				type = new PointerTypeNode(location, type);
			else if (lex.token == Token.Dot)
			{
				lex.CheckNext(Token.Ident);
				type = new FieldNode(location, type, lex.ident);
			}
			else
				return type;
		}
	}

	private ParseType() -> Node
	{
		Node type = TryParseType();
		if (type == null)
			throw new UnexpectedTokenException();
		return type;
	}

	private ParseNamespace() -> Namespace
	{
		Namespace current = root;
		for (;;)
		{
			lex.Assert(Token.Ident);
			int32 found;
			Object sp;
			if ((found, sp = current.children.Contains(lex.ident)) == 0)
			{
				sp = new Namespace(lex.ident, current);
				current.children.Add(lex.ident, sp);
			}
			current = [Namespace] sp;
			lex.Next();
			if (lex.token != Token.Dot)
				return current;
			lex.Assert(Token.Dot);
			lex.Next();
		}
	}

	private ParseFile()
	{
		SourceFile sourceFile = new SourceFile(currentFileName, root);
		Namespace startNamespace = root;
		if (lex.token == Token.Namespace)
		{
			lex.Next();
			startNamespace = ParseNamespace();
			lex.Assert(Token.Semicolon);
			lex.Next();
			sourceFile.namespaces.Add(startNamespace);
		}
		while (lex.token == Token.Using)
		{
			lex.Next();
			sourceFile.namespaces.Add(ParseNamespace());
			lex.Assert(Token.Semicolon);
			lex.Next();
		}
		while (lex.token == Token.Ident && lex.ident.Equals("class") > 0)
		{
			Class classObject = new Class(GetCurrentLocation());
			classObject.sourceFile = sourceFile;
			lex.CheckNext(Token.Ident);
			/* TODO: This should be a function */
			String fullName;
			if (startNamespace.name.Equals("") > 0)
				fullName = lex.ident;
			else
				fullName = startNamespace.name + "." + lex.ident;
			String name = lex.ident;
			lex.Next();
			Namespace current = startNamespace;
			while (lex.token == Token.Dot)
			{
				int32 found;
				Object sp;
				if ((found, sp = current.children.Contains(name)) == 0)
				{
					sp = new Namespace(name, current);
					current.children.Add(name, sp);
				}
				current = [Namespace] sp;

				lex.CheckNext(Token.Ident);
				fullName = fullName + "." + lex.ident;
				name = lex.ident;
				lex.Next();
			}
			current.children.Add(name, classObject);
			classObject.name = fullName;
			if (lex.token == Token.Colon)
			{
				lex.Next();
				classObject.baseType = ParseType();
			}
			else if (classObject.name.Equals("Core.Object") > 0)
				classObject.baseType = null;
			else
			{
				Location location = GetCurrentLocation();
				classObject.baseType = new FieldNode(location, new IdentNode(location, "Core"), "Object");
			}
			lex.Assert(Token.BLeft);
			lex.Next();
			while (lex.token != Token.BRight)
			{
				int32 modifier = ParseModifier();
				lex.Checkpoint();

				Node type = TryParseType();
				if (type == null || lex.token == Token.PLeft)
				{
					lex.RollbackCheckpoint();

					Method method = new Method(GetCurrentLocation());
					method.classObject = classObject;
					method.modifier = modifier;
					if (lex.token == Token.PLeft)
						method.name = ".ctor";
					else
					{
						if (lex.token == Token.Ident)
							method.name = lex.ident;
						else
						{
							if (method.modifier & Modifier.Static == 0)
								throw new Exception(); /* TODO */
							method.name = Compiler.GetOperatorMethodName(lex.token);
						}
						lex.CheckNext(Token.PLeft);
					}

					/* Get parameters */
					lex.Next();
					/* HACK: break */
					while (lex.token != Token.PRight)
					{
						method.paramTypes.Add(new TypeCache(ParseType()));
						if (lex.token == Token.Ident)
						{
							/* Named parameter */
							method.paramNames.Add(lex.ident);
							lex.Next();
						}
						else
						{
							/* Unnamed parameter */
							method.paramNames.Add("");
						}
						if (lex.token != Token.PRight)
						{
							lex.Assert(Token.Comma);
							lex.Next();
						}
					}
					lex.Next();

					/* Get returns */
					if (lex.token == Token.Arrow)
					{
						lex.Next();
						/* HACK: break */
						int32 BREAK = 0;
						/* HACK: for (;;) */
						while (BREAK == 0)
						{
							method.returnTypes.Add(new TypeCache(ParseType()));
							if (lex.token == Token.Ident)
							{
								/* Named return */
								method.returnNames.Add(lex.ident);
								lex.Next();
							}
							else
							{
								/* Unnamed return */
								method.returnNames.Add("");
							}
							if (lex.token == Token.Comma)
								lex.Next();
							else
								BREAK = 1;
						}
					}

					if (modifier & Modifier.Internal > 0 || modifier & Modifier.Abstract > 0)
					{
						method.body = null;
						lex.Assert(Token.Semicolon);
						lex.Next();
					}
					else if (modifier & Modifier.Native > 0)
					{
						method.body = null;
						lex.Assert(Token.Semicolon);
						lex.CheckNext(Token.SLeft);
						lex.Next();
						method.callingConvention = ParseCallingConvention();
						lex.Assert(Token.Comma);
						lex.CheckNext(Token.String);
						method.libraryName = lex.ident;
						lex.CheckNext(Token.Comma);
						lex.CheckNext(Token.String);
						method.originalName = lex.ident;
						lex.CheckNext(Token.SRight);
						lex.Next();
					}
					else
						method.body = ParseStatement();
					classObject.methods.Add(method.name, method);
				}
				else
				{
					lex.FinishCheckpoint();
					for (bool first = true;; first = false)
					{
						lex.Assert(Token.Ident);
						String name = lex.ident;
						lex.Next();
						if (first && lex.token == Token.BLeft)
						{
							/* Property */
							lex.Next();
							Property property = new Property(GetCurrentLocation());
							property.classObject = classObject;
							property.modifier = modifier;
							property.type = new TypeCache(type);
							property.name = name;
							for (;;)
							{
								if (lex.token == Token.Ident &&
									(lex.ident.Equals("get") > 0 || lex.ident.Equals("set") > 0))
								{
									Method method = new Method(GetCurrentLocation());
									method.classObject = classObject;
									method.modifier = modifier;
									if (lex.ident.Equals("get") > 0)
									{
										if (property.getter != null)
											throw new ParserException();
										property.getter = method;
										method.name = ".get" + name;
										method.returnTypes.Add(new TypeCache(type));
										method.returnNames.Add("");
									}
									else
									{
										if (property.setter != null)
											throw new ParserException();
										property.setter = method;
										method.name = ".set" + name;
										method.paramTypes.Add(new TypeCache(type));
										method.paramNames.Add("value");
									}
									lex.Next();
									if (method.modifier & Modifier.Abstract > 0)
									{
										lex.Assert(Token.Semicolon);
										lex.Next();
									}
									else
										method.body = ParseStatement();
									classObject.methods.Add(method.name, method);
								}
								else
									break;
							}
							lex.Assert(Token.BRight);
							lex.Next();
							classObject.properties.Add(property.name, property);
							break;
						}
						else
						{
							/* Field */
							Field field = new Field(GetCurrentLocation());
							field.classObject = classObject;
							field.modifier = modifier;
							field.type = new TypeCache(type);
							field.name = name;
							classObject.fields.Add(field.name, field);

							if (lex.token == Token.Semicolon)
							{
								lex.Next();
								break;
							}
							else
							{
								lex.Assert(Token.Comma);
								lex.Next();
							}
						}
					}
				}
			}
			lex.Next(); /* '}' */

			/* Generate constructor if there isn't one */
			if (classObject.methods.Contains(".ctor") == 0)
			{
				ReturnNode body = new ReturnNode(GetCurrentLocation());

				Method method = new Method(GetCurrentLocation());
				method.classObject = classObject;
				method.name = ".ctor";
				method.modifier = Modifier.Public;
				method.body = [Node] body;
				classObject.methods.Add(".ctor", method);
			}
			classes.Add(classObject);
		}
	}

	private ParseStatement() -> Node
	{
		if (lex.token == Token.BLeft)
		{
			MultipleNode node = new MultipleNode(GetCurrentLocation());
			lex.Next();
			/* TODO: This cannot handle bugs */
			while (lex.token != Token.BRight)
				node.nodes.Add(ParseStatement());
			lex.Next();
			return node;
		}
		else if (lex.token == Token.If)
		{
			IfNode node = new IfNode(GetCurrentLocation());
			lex.CheckNext(Token.PLeft);
			lex.Next();
			node.condition = ParseList();
			lex.Assert(Token.PRight);
			lex.Next();
			node.trueBody = ParseStatement();
			if (lex.token == Token.Else)
			{
				lex.Next();
				node.falseBody = ParseStatement();
			}
			else
				node.falseBody = null;
			return node;
		}
		else if (lex.token == Token.For)
		{
			ForNode node = new ForNode(GetCurrentLocation());
			lex.CheckNext(Token.PLeft);
			lex.Next();
			if (lex.token == Token.Semicolon)
				node.init = null;
			else
			{
				node.init = ParseSingleStatement();
				lex.Assert(Token.Semicolon);
			}
			lex.Next();
			if (lex.token == Token.Semicolon)
				node.condition = null;
			else
			{
				node.condition = ParseList();
				lex.Assert(Token.Semicolon);
			}
			lex.Next();
			if (lex.token == Token.PRight)
				node.update = null;
			else
			{
				node.update = ParseList();
				lex.Assert(Token.PRight);
			}
			lex.Next();
			node.body = ParseStatement();
			return node;
		}
		else if (lex.token == Token.While)
		{
			WhileNode node = new WhileNode(GetCurrentLocation());
			lex.CheckNext(Token.PLeft);
			lex.Next();
			node.condition = ParseList();
			lex.Assert(Token.PRight);
			lex.Next();
			node.body = ParseStatement();
			return node;
		}
		else if (lex.token == Token.Do)
		{
			DoWhileNode node = new DoWhileNode(GetCurrentLocation());
			lex.Next();
			node.body = ParseStatement();
			lex.Assert(Token.While);
			lex.CheckNext(Token.PLeft);
			lex.Next();
			node.condition = ParseList();
			lex.Assert(Token.PRight);
			lex.CheckNext(Token.Semicolon);
			lex.Next();
			return node;
		}
		else if (lex.token == Token.Return)
		{
			lex.Next();
			ReturnNode node = new ReturnNode(GetCurrentLocation());
			if (lex.token != Token.Semicolon)
			{
				/* HACK: break */
				int32 BREAK = 0;
				while (BREAK == 0)
				{
					node.values.Add(ParseExpression(0));
					if (lex.token == Token.Semicolon)
						BREAK = 1;
					else
					{
						lex.Assert(Token.Comma);
						lex.Next();
					}
				}
			}
			lex.Next();
			return node;
		}
		else if (lex.token == Token.Continue)
		{
			lex.CheckNext(Token.Semicolon);
			lex.Next();
			return new ContinueNode(GetCurrentLocation());
		}
		else if (lex.token == Token.Break)
		{
			lex.CheckNext(Token.Semicolon);
			lex.Next();
			return new BreakNode(GetCurrentLocation());
		}
		else if (lex.token == Token.Try)
		{
			lex.Next();
			TryNode node = new TryNode(GetCurrentLocation());
			node.body = ParseStatement();
			while (lex.token == Token.Catch)
			{
				CatchNode cnode = new CatchNode(GetCurrentLocation());
				lex.CheckNext(Token.PLeft);
				lex.Next();
				cnode.type = ParseType();
				lex.Assert(Token.Ident);
				cnode.name = lex.ident;
				lex.CheckNext(Token.PRight);
				lex.Next();
				cnode.body = ParseStatement();
				node.catchNodes.Add(cnode);
			}
			if (lex.token == Token.Finally)
			{
				lex.Next();
				node.finallyNode = ParseStatement();
			}
			if (node.catchNodes.Size == 0 && node.finallyNode == null)
				throw new Exception(); /* TODO */
			return node;
		}
		else if (lex.token == Token.Throw)
		{
			lex.Next();
			ThrowNode node = new ThrowNode(GetCurrentLocation());
			node.exception = ParseList();
			lex.Assert(Token.Semicolon);
			lex.Next();
			return node;
		}
		else
		{
			Node node = ParseSingleStatement();
			lex.Assert(Token.Semicolon);
			lex.Next();
			return node;
		}
	}

	/* Parse a single statement (without semicolon) */
	private ParseSingleStatement() -> Node
	{
		lex.Checkpoint();
		Node type = TryParseType();
		if (type == null || lex.token != Token.Ident)
		{
			lex.RollbackCheckpoint();
			return ParseList();
		}
		lex.FinishCheckpoint();

		DefinitionNode node = new DefinitionNode(GetCurrentLocation());
		node.type = type;
		/* HACK: for (;;) */
		/* HACK: break */
		int32 BREAK = 0;
		while (BREAK == 0)
		{
			lex.Assert(Token.Ident);
			node.names.Add(lex.ident);
			lex.Next();
			if (lex.token == Token.Assign)
			{
				lex.Next();
				node.values.Add(ParseExpression(0));
			}
			else
				node.values.Add(null);
			if (lex.token != Token.Comma)
				BREAK = 1;
			else
				lex.Next();
		}
		return node;
	}

	/* Parse list operations */
	private ParseList() -> Node
	{
		Node node = ParseExpression(0);
		if (lex.token == Token.Comma)
		{
			ListNode ret = new ListNode(GetCurrentLocation());
			ret.values.Add(node);
			while (lex.token == Token.Comma)
			{
				lex.Next();
				ret.values.Add(ParseExpression(0));
			}
			node = [Node] ret;
		}

		if (lex.token == Token.Assign)
		{
			lex.Next();
			AssignNode ret = new AssignNode(GetCurrentLocation());
			ret.left = node;
			ret.right = ParseList();
			return ret;
		}
		else
			return node;
	}

	/* Parse binary operators */
	private ParseExpression(int32 priority) -> Node
	{
		Node left = ParseObjectAccess();
		while (lex.token <= Token.BinOp && Token.BinPriority[lex.token] > priority)
		{
			BinNode node;
			if (lex.token <= Token.BinArith)
				node = new BinArithNode(GetCurrentLocation());
			else if (lex.token <= Token.BinComparison)
				node = new BinComparisonNode(GetCurrentLocation());
			else if (lex.token <= Token.BinLogic)
				node = new BinLogicNode(GetCurrentLocation());
			else
				node = new BinNode(GetCurrentLocation());
			node.op = lex.token;
			node.left = left;
			lex.Next();
			/* Parse binary operations with higher priority */
			node.right = ParseExpression(Token.BinPriority[node.op]);

			left = node;
		}
		return left;
	}

	/* Parse suffixes to unary operations */
	private ParseObjectAccess() -> Node
	{
		Node object = ParseUnary();
		/* HACK: for (;;) */
		/* HACK: break */
		int32 BREAK = 0;
		while (BREAK == 0)
		{
			if (lex.token == Token.Dot)
			{
				lex.CheckNext(Token.Ident);

				object = new FieldNode(GetCurrentLocation(), object, lex.ident);
				lex.Next();
			}
			else if (lex.token == Token.PLeft)
			{
				lex.Next();

				CallNode node = new CallNode(GetCurrentLocation());
				node.method = object;

				if (lex.token != Token.PRight)
				{
					/* HACK: for (;;) */
					/* HACK: break */
					int32 BREAK = 0;
					while (BREAK == 0)
					{
						node.parameters.Add(ParseExpression(0));
						if (lex.token == Token.PRight)
							BREAK = 1;
						else
						{
							lex.Assert(Token.Comma);
							lex.Next();
						}
					}
				}
				lex.Next(); /* ')' */

				object = [Node] node;
			}
			else if (lex.token == Token.SLeft)
			{
				lex.Next();

				ArrayElementNode node = new ArrayElementNode(GetCurrentLocation());
				node.array = object;
				node.index = ParseList();
				object = [Node] node;

				lex.Assert(Token.SRight);
				lex.Next();
			}
			else
				BREAK = 1;
		}
		return object;
	}

	/* Parse unary operations */
	private ParseUnary() -> Node
	{
		lex.FixUnary();
		if (lex.token > Token.BinOp && lex.token <= Token.UnaryOp)
		{
			UnaryNode node = new UnaryNode(GetCurrentLocation());
			node.op = lex.token;
			lex.Next();
			node.operand = ParseObjectAccess();
			return node;
		}
		else if (lex.token == Token.Star)
		{
			DereferenceNode node = new DereferenceNode(GetCurrentLocation());
			lex.Next();
			node.operand = ParseObjectAccess();
			return node;
		}
		else if (lex.token == Token.AddressOf)
		{
			AddressOfNode node = new AddressOfNode(GetCurrentLocation());
			lex.Next();
			node.operand = ParseObjectAccess();
			return node;
		}
		else if (lex.token == Token.PLeft)
		{
			lex.Next();
			Node node = ParseList();
			lex.Assert(Token.PRight);
			lex.Next();
			return node;
		}
		else if (lex.token == Token.SLeft)
		{
			lex.Next();
			TypeCastNode node = new TypeCastNode(GetCurrentLocation());
			node.type = ParseType();
			lex.Assert(Token.SRight);
			lex.Next();
			node.operand = ParseObjectAccess();
			return node;
		}
		else if (lex.token == Token.New)
		{
			lex.Next();
			Node type = ParseType();
			if (lex.token == Token.SLeft)
			{
				NewArrayNode node = new NewArrayNode(GetCurrentLocation());
				node.type = type;
				lex.Next();
				node.parameter = ParseList();
				lex.Assert(Token.SRight);
				lex.Next();
				return node;
			}
			else
			{
				NewNode node = new NewNode(GetCurrentLocation());
				node.type = type;
				lex.Assert(Token.PLeft);
				lex.Next();
				if (lex.token != Token.PRight)
				{
					/* HACK: for (;;) */
					int32 BREAK = 0;
					while (BREAK == 0)
					{
						node.parameters.Add(ParseExpression(0));
						if (lex.token == Token.PRight)
							BREAK = 1;
						else
						{
							lex.Assert(Token.Comma);
							lex.Next();
						}
					}
				}
				lex.Next();
				return node;
			}
		}
		else if (lex.token == Token.This)
		{
			lex.Next();
			return new ThisNode(GetCurrentLocation());
		}
		else if (lex.token == Token.Null)
		{
			lex.Next();
			return new NullNode(GetCurrentLocation());
		}
		else if (lex.token == Token.True || lex.token == Token.False)
		{
			BoolNode node = new BoolNode(GetCurrentLocation());
			/* HACK: bool */
			if (lex.token == Token.True)
				node.boolvalue = 1;
			else
				node.boolvalue = 0;
			lex.Next();
			return node;
		}
		else if (lex.token == Token.Number)
		{
			IntegerNode node = new IntegerNode(GetCurrentLocation());
			node.intvalue = lex.ident;
			lex.Next();
			return node;
		}
		else if (lex.token == Token.String)
		{
			StringNode node = new StringNode(GetCurrentLocation());
			node.stringvalue = lex.ident;
			lex.Next();
			return node;
		}
		else if (lex.token == Token.Ident)
		{
			IdentNode node = new IdentNode(GetCurrentLocation(), lex.ident);
			lex.Next();
			return node;
		}
		else
			throw new UnexpectedTokenException();
	}
}
