using Core;

class CompilerException
{
	public String message;
	public Location location;

	public (String message, Location location)
	{
		this.message = message;
		this.location = location;
	}

	public ToString() -> String
	{
		return location.ToString() + ": " + message;
	}
}

class Variable
{
	public int32 regid;
	public Type type;
}

class Context
{
	public static int32 Loop, TryCatch, Finally;

	public int32 loopLevel, tryCatchLevel, finallyLevel;
	public int32 continueLabelId;
	public int32 breakLabelId;
	public int32 firstReturnRegister;
	public Stack contextType;
	public bool generateEpilogue;

	public ()
	{
		contextType = new Stack();
	}

	public static InitContext()
	{
		Context.Loop, Context.TryCatch, Context.Finally = 1, 2, 3;
	}
}

class Compiler
{
	private Vector classes;

	public Vector code;
	private int32 tab;
	private Stack symbolTable; /* Stack of symbol hashes */
	private SourceFile currentSourceFile;
	private Class currentClass;
	private Method currentMethod;
	private int32 currentLabelId;
	private Namespace root;

	public Namespace Root
	{
		get { return root; }
	}

	public Vector Classes
	{
		get { return classes; }
	}

	public SourceFile CurrentSourceFile
	{
		get { return currentSourceFile; }
	}

	public Class CurrentClass
	{
		get { return currentClass; }
	}

	public Method CurrentMethod
	{
		get { return currentMethod; }
	}

	public (Namespace root, Vector classes)
	{
		this.root = root;
		this.classes = classes;
		code = new Vector();
		symbolTable = new Stack();
	}

	private GetLabelName(int32 labelId) -> String
	{
		return "_L" + labelId;
	}

	private GetNextLabelId() -> int32
	{
		currentLabelId = currentLabelId + 1;
		return currentLabelId - 1;
	}

	private AddCode(String line)
	{
		String tabs = "";
		for (int32 i = 0; i < tab; i = i + 1)
			tabs = tabs + "\t";
		code.Add(tabs + line);
	}

	private AddLabel(int32 labelId)
	{
		code.Add(GetLabelName(labelId) + ":");
	}

	private AddStringLabel(String label)
	{
		code.Add(label + ":");
	}

	private Tab()
	{
		tab = tab + 1;
	}

	private Untab()
	{
		tab = tab - 1;
	}

	private PushSymbolStack()
	{
		symbolTable.Push(new Hash());
	}

	private PopSymbolStack()
	{
		symbolTable.Pop();
	}

	private FindSymbol(String name) -> Variable, int32
	{
		for (int32 i = symbolTable.Size - 1; i >= 0; i = i - 1)
		{
			int32 found;
			Object ret;
			if ((found, ret = ([Hash] symbolTable.data[i]).Contains(name)) > 0)
				return [Variable] ret, 1;
		}
		return null, 0;
	}

	public static GetOperatorMethodName(int32 op) -> String
	{
		if (op == Token.Add)
			return ".opAdd";
		else if (op == Token.Sub)
			return ".opSub";
		else if (op == Token.Mul)
			return ".opMul";
		else if (op == Token.Div)
			return ".opDiv";
		else if (op == Token.Rem)
			return ".opRem";
		else if (op == Token.LT)
			return ".opLT";
		else if (op == Token.LE)
			return ".opLE";
		else if (op == Token.GT)
			return ".opGT";
		else if (op == Token.GE)
			return ".opGE";
		else if (op == Token.EQ)
			return ".opEQ";
		else if (op == Token.NEQ)
			return ".opNEQ";
		else if (op == Token.Array)
			return ".opArrayElement";
		else
			return null;
	}

	public GetMethodSignature(Method method) -> String
	{
		return method.classObject.name + "::" + method.name + ResolvePrototype(method);
	}
	
	private ToScalar(Vector values) -> Value
	{
		if (values.Size == 0)
			throw new Exception(); /* TODO */
		return [Value] values[0];
	}

	private Scalar(Value value) -> Vector
	{
		Vector ret = new Vector();
		ret.Add(value);
		return ret;
	}

	public Compile()
	{
		/* Set class.baseClass */
		for (int32 i = 0; i < classes.Size; i = i + 1)
		{
			currentClass = [Class] classes[i];
			currentSourceFile = currentClass.sourceFile;
			if (currentClass.baseType != null)
			{
				Type baseType = currentClass.baseType.ToType(this);
				if (baseType is ClassType)
					currentClass.baseClass = ([ClassType] baseType).Class;
				else
					throw new CompilerException("Cannot inherit from \"" + baseType.ToString() + "\".", currentClass.location);
			}
		}

		/* TODO: Check circular dependency */

		tab = 0;
		for (int32 i = 0; i < classes.Size; i = i + 1)
		{
			currentClass = [Class] classes[i];
			currentSourceFile = currentClass.sourceFile;
			if (currentClass.baseClass == null)
				AddCode(".class " + currentClass.name);
			else
				AddCode(".class " + currentClass.name + ": " + currentClass.baseClass.name);
			AddCode("{");
			Tab();

			Vector fields = currentClass.fields.values;
			for (int32 j = 0; j < fields.Size; j = j + 1)
				CompileField([Field] fields[j]);

			Vector properties = currentClass.properties.values;
			for (int32 j = 0; j < properties.Size; j = j + 1)
				CompileProperty([Property] properties[j]);

			Vector methods = currentClass.methods.values;
			for (int32 j = 0; j < methods.Size; j = j + 1)
				CompileMethod([Method] methods[j]);

			Untab();
			AddCode("}");
		}
	}

	private CompileField(Field field)
	{
		String modifier = Modifier.ToString(field.modifier);
		if (modifier.Length > 0)
			modifier = modifier + " ";
		AddCode(".field " + modifier + ResolveType(field.type).ToString() + " " + field.name);
	}

	private CompileProperty(Property property)
	{
		String modifier = Modifier.ToString(property.modifier);
		if (modifier.Length > 0)
			modifier = modifier + " ";
		AddCode(".property " + modifier + ResolveType(property.type).ToString() + " " + property.name);
		if (property.getter != null)
			AddCode("\t.get " + GetMethodSignature(property.getter));
		if (property.setter != null)
			AddCode("\t.set " + GetMethodSignature(property.setter));
	}

	private CompileMethod(Method method)
	{
		String modifier = Modifier.ToString(method.modifier);
		if (modifier.Length > 0)
			modifier = modifier + " ";

		AddCode(".method " + modifier + "function " + method.name + ResolvePrototype(method));

		if (method.modifier & Modifier.Internal > 0 || method.modifier & Modifier.Abstract > 0)
		{
			/* Do nothing */
		}
		else if (method.modifier & Modifier.Native > 0)
		{
			AddCode("[" + CallingConvention.ToString(method.callingConvention) + ", \"" + method.libraryName
				+ "\", \"" + method.originalName + "\"]");
		}
		else
		{
			/* Check for improper override */
			if (method.modifier & Modifier.Override > 0)
			{
				/* Check if it actually overrides a method */
				bool ok = false;
				Class c = method.classObject;
				while (c.baseClass != null)
				{
					c = c.baseClass;
					Vector methods = c.methods.FindAll(method.name);
					bool done = false;
					for (int32 i = 0; i < methods.Size; i = i + 1)
					{
						Method another = [Method] methods[i];
						if (ResolvePrototype(method).Equals(ResolvePrototype(another)) > 0)
						{
							if (another.modifier & Modifier.Virtual > 0 || another.modifier & Modifier.Abstract > 0)
							{
								done = true;
								ok = true;
								break;
							}
							else if (another.modifier & Modifier.Override == 0)
							{
								done = true;
								break;
							}
						}
					}
					if (done)
						break;
				}
				/* HACK: not */
				if (ok)
				{}
				else
					throw new CompilerException("The method \"" + method.name
						+ "\" makred with \"override\" does not override any methods.", method.location);
			}
			else
			{
				/* TODO: Check implicit override and display a warning */
			}

			AddCode("{");
			Tab();
			PushSymbolStack();

			Context context = new Context();
			int32 freereg = 0;
			if (method.modifier & Modifier.Static == 0)
				freereg = freereg + 1;

			for (int32 i = 0; i < method.paramNames.Size; i = i + 1)
			{
				String name = [String] method.paramNames[i];
				if (name.Equals("") == 0)
				{
					Variable var = new Variable();
					var.regid = freereg + i;
					var.type = ResolveType([TypeCache] method.paramTypes[i]);
					([Hash] symbolTable.Peek()).Add(name, var);
				}
			}
			freereg = freereg + method.paramNames.Size;
			context.firstReturnRegister = freereg;
			for (int32 i = 0; i < method.returnNames.Size; i = i + 1)
			{
				String name = [String] method.returnNames[i];
				if (name.Equals("") == 0)
				{
					Variable var = new Variable();
					var.regid = freereg + i;
					var.type = ResolveType([TypeCache] method.returnTypes[i]);
					([Hash] symbolTable.Peek()).Add(name, var);
				}
			}
			freereg = freereg + method.returnNames.Size;

			currentMethod = method;
			currentLabelId = 1;
			int32 closed = method.body.CompileStatement(this, freereg, context);
			if (closed == 0 || context.generateEpilogue)
			{
				if (context.generateEpilogue)
					AddStringLabel("_Epilogue");
				/* Unclosed statement block, insert return statement manually */
				if (method.returnNames.Size == 0)
					AddCode("ret");
				else if (method.returnNames.Size == 1)
					AddCode("ret\t$" + context.firstReturnRegister);
				else
					AddCode("ret\t$" + context.firstReturnRegister + ", $"
						+ (context.firstReturnRegister + method.returnTypes.Size));
			}

			PopSymbolStack();
			Untab();
			AddCode("}");
		}
	}

	private FixJumpTarget(int32 jtarget) -> int32
	{
		if (jtarget == 0)
		{
			currentLabelId = currentLabelId + 1;
			return currentLabelId - 1;
		}
		else
			return jtarget;
	}

	/* Convert types to a unified stack type for doing arithmetic */
	private UnifyTypes(Location location, Value left, Value right, int32 leftreg, int32 rightreg) -> Value, Value
	{
		/* TODO: Immediate value */
		Type type;

		if (left.CanImplicitlyConvertTo(Type.Int8) && right.CanImplicitlyConvertTo(Type.Int8))
			type = Type.Int8;
		else if (left.CanImplicitlyConvertTo(Type.UInt8) && right.CanImplicitlyConvertTo(Type.UInt8))
			type = Type.UInt8;
		else if (left.CanImplicitlyConvertTo(Type.Int16) && right.CanImplicitlyConvertTo(Type.Int16))
			type = Type.Int16;
		else if (left.CanImplicitlyConvertTo(Type.UInt16) && right.CanImplicitlyConvertTo(Type.UInt16))
			type = Type.UInt16;
		else if (left.CanImplicitlyConvertTo(Type.Int32) && right.CanImplicitlyConvertTo(Type.Int32))
			type = Type.Int32;
		else if (left.CanImplicitlyConvertTo(Type.UInt32) && right.CanImplicitlyConvertTo(Type.UInt32))
			type = Type.UInt32;
		else
			throw new CompilerException("Uncompatible types.", location);

		Value l = left.ToTyped(this, leftreg, type);
		Value r = right.ToTyped(this, rightreg, type);

		return l, r;
	}

	/* Convert to a typed value from its corresponding raw stack value */
	private FixRawValue(RegisterValue value, int32 targetreg) -> RegisterValue
	{
		/* TODO: Immediate value */
		Type stackType = value.type.StackType;
		if (value.type.Equals(stackType) == 0)
		{
			RegisterValue ret = value.EnsureRegister(this, targetreg);
			AddCode("conv\t" + value.type.ToString() + " $" + targetreg + ", "
				+ stackType.ToString() + " $" + value.regid);
			value.regid = targetreg;
			return value;
		}
		else
			return value;
	}

	private CompileCustomBinaryOperator(Location location, int32 op, Value left, Value right, int32 firstreg) -> Value
	{
		/* TODO: Is this right? */
		Value l = left.EnsureSingleSlot(this, firstreg);
		Value r = right.EnsureSingleSlot(this, firstreg + 1);

		String methodName = GetOperatorMethodName(op);
		if (methodName == null)
			throw new CompilerException("Unsupported operator.", location);

		Vector methods = new Vector();
		if (l.type is ClassType)
			ResolveMethod(([ClassType] l.type).Class, methodName, methods);
		if (r.type is ClassType)
			ResolveMethod(([ClassType] r.type).Class, methodName, methods);

		Vector values = new Vector();
		values.Add(l);
		values.Add(r);

		Method method = PrepareCall(location, methods, values, firstreg);
		AddCode("call\t$" + firstreg + ", " + GetMethodSignature(method));
		return new RegisterValue(location, firstreg, ResolveType([TypeCache] method.returnTypes[0]));
	}

	private ResolveType(TypeCache type) -> Type
	{
		if (type.cache == null)
			type.cache = type.type.ToType(this);
		return type.cache;
	}

	private ResolvePrototype(Method method) -> String
	{
		if (method.prototype == null)
		{
			/* Concatenate prototype string */
			String prototype = "(";
			for (int32 i = 0; i < method.paramTypes.Size; i = i + 1)
			{
				if (i == 0)
					prototype = prototype + ResolveType([TypeCache] method.paramTypes[i]).ToString();
				else
					prototype = prototype + ", " + ResolveType([TypeCache] method.paramTypes[i]).ToString();
			}
			prototype = prototype + ")";
			if (method.returnTypes.Size > 0)
			{
				prototype = prototype + " -> ";
				for (int32 i = 0; i < method.returnTypes.Size; i = i + 1)
				{
					if (i == 0)
						prototype = prototype + ResolveType([TypeCache] method.returnTypes[i]).ToString();
					else
						prototype = prototype + ", " + ResolveType([TypeCache] method.returnTypes[i]).ToString();
				}
			}
			method.prototype = prototype;
		}
		return method.prototype;
	}

	/* Resolves a field, returns null if not found */
	private ResolveField(Class startClass, String name) -> Field
	{
		Class c = startClass;
		while (c != null)
		{
			Object field;
			int32 found;
			if ((found, field = c.fields.Contains(name)) > 0)
				return [Field] field;
			c = c.baseClass;
		}
		return null;
	}

	/* Resolves a property, returns null if not found */
	private ResolveProperty(Class startClass, String name) -> Property
	{
		Class c = startClass;
		while (c != null)
		{
			Object property;
			int32 found;
			if ((found, property = c.properties.Contains(name)) > 0
				&& ([Property] property).modifier & Modifier.Override == 0)
					return [Property] property;
			c = c.baseClass;
		}
		return null;
	}

	/* Resolves a method by name, append possible candidates to `methods` vector */
	private ResolveMethod(Class startClass, String name, Vector methods) -> Vector
	{
		if (methods == null)
			methods = new Vector();
		Class c = startClass;
		while (c != null)
		{
			ResolveMethodInClass(c, name, methods);
			c = c.baseClass;
		}
		return methods;
	}

	/* Resolves a method in a single class */
	private ResolveMethodInClass(Class classObject, String name, Vector methods) -> Vector
	{
		if (methods == null)
			methods = new Vector();
		Vector current = classObject.methods.FindAll(name);
		for (int32 i = 0; i < current.Size; i = i + 1)
		{
			Method method = [Method] current[i];
			if (method.modifier & Modifier.Override == 0) /* Do not include overridden methods */
			{
				bool ok = true;
				/* Make sure this method is not overridden by a subclass method */
				for (int32 j = 0; j < methods.Size; j = j + 1)
				{
					Method another = [Method] methods[j];
					if (ResolvePrototype(method).Equals(ResolvePrototype(another)) > 0)
					{
						ok = false;
						break;
					}
				}
				if (ok)
					methods.Add(method);
			}
		}
		return methods;
	}

	/* Choose best method in `methods`,
	   Ensures `values` are converted to proper types and placed sequentially from `firstreg`
	   Returns best method */
	private PrepareCall(Location location, Vector methods, Vector values, int32 firstreg) -> Method
	{
		Vector candidates = new Vector();
		/* Check valid candidates */
		for (int32 i = 0; i < methods.Size; i = i + 1)
		{
			Method method = [Method] methods[i];
			if (method.paramTypes.Size == values.Size)
			{
				bool ok = true;
				for (int32 j = 0; j < method.paramTypes.Size; j = j + 1)
					/* HACK: not */
					if (([Value] values[j]).CanImplicitlyConvertTo(ResolveType([TypeCache] method.paramTypes[j])))
					{}
					else
					{
						ok = false;
						break;
					}
				if (ok)
					candidates.Add(method);
			}
		}
		Method method = ChooseBestMethod(location, candidates, values);
		/* Prepare values */
		for (int32 i = 0; i < values.Size; i = i + 1)
			([Value] values[i]).ToTypedRegister(
				this, firstreg + i, firstreg + i, ResolveType([TypeCache] method.paramTypes[i])
			);
		return method;
	}

	/* S = Given type, T1 = Method 1 type, T2 = Method 2 type
	 * `->` means implicitly convertible
	 * Rules:
	 * 1. If T1 = T2, neither is better.
	 * 2. If S = T1, T1 is better.
	 *    If S = T2, T2 is better.
	 * 3. If T1 -> T2 and not T2 -> T1, T1 is beter.
	 *    If T2 -> T1 and not T1 -> T2, T2 is better.
	 * 4. Otherwise, neither is better.
	 */
	private ChooseBestMethod(Location location, Vector methods, Vector values) -> Method
	{
		if (methods.Size == 0)
			throw new CompilerException("No method prototype match type of given parameters.", location);
		for (int32 i = 0; i < methods.Size; i = i + 1)
		{
			Method current = [Method] methods[i];
			bool ok = true;
			for (int32 j = 0; j < methods.Size; j = j + 1)
				if (i != j)
				{
					Method another = [Method] methods[j];
					bool better = false;
					for (int32 k = 0; k < values.Size; k = k + 1)
					{
						Type S = ([Value] values[k]).type;
						Type T1 = ResolveType([TypeCache] current.paramTypes[k]);
						Type T2 = ResolveType([TypeCache] another.paramTypes[k]);
						if (T1.Equals(T2) > 0)
							continue;
						if (S.Equals(T1) > 0)
						{
							better = true;
							continue;
						}
						if (S.Equals(T2) > 0)
						{
							better = false;
							break;
						}
						/* HACK: not */
						int32 c1 = 0, c2 = 0;
						if (T1.CanImplicitlyConvertTo(T2))
							c1 = 1;
						if (T2.CanImplicitlyConvertTo(T1))
							c2 = 1;
						/*bool c1 = T1.CanImplicitlyConvertTo(T2), c2 = T2.CanImplicitlyConvertTo(T1);*/
						if (c1 > 0 && c2 == 0)
							better = true;
						else if (c1 == 0 && c2 > 0)
						{
							better = false;
							break;
						}
					}
					/* Best method must be better than any other method */
					/* HACK: not */
					if (better)
					{}
					else
					{
						ok = false;
						break;
					}
				}
			if (ok)
				return current;
		}
		throw new CompilerException("Ambiguous function call.", location);
	}
}
