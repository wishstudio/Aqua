namespace Ocean;

using Core;
using Core.Native;

class InvalidBytecodeException: Exception
{
}

class BytecodeReader
{
	private String[] internalStringTable;
	private String[] stringTable;

	public ()
	{
	}

	public ReadFile(String fileName)
	{
		uint8[] data = File.ReadAllBytes(fileName);
		BytecodeFileDef* bytecodeFileDef = [BytecodeFileDef*] &data[0];
		if (bytecodeFileDef.magic != 1635086657) /* Aqua */
			throw new InvalidBytecodeException();
		if (bytecodeFileDef.bytecodeVersion != 0)
			throw new InvalidBytecodeException();

		uint8* pointer = [uint8*] (bytecodeFileDef + 1);

		/* Index tables */
		int32* internalStringIndexTable = [int32*] pointer;
		pointer = [uint8*] ([int32*] pointer + bytecodeFileDef.internalStringCount);

		int32* stringIndexTable = [int32*] pointer;
		pointer = [uint8*] ([int32*] pointer + bytecodeFileDef.stringCount);

		int32* typeIndexTable = [int32*] pointer;
		pointer = [uint8*] ([int32*] pointer + bytecodeFileDef.typeCount);

		/* Tables */
		FieldRef* fieldRefTable = [FieldRef*] pointer;
		pointer = [uint8*] ([FieldRef*] pointer + bytecodeFileDef.fieldRefCount);

		MethodRef* methodRefTable = [MethodRef*] pointer;
		pointer = [uint8*] ([MethodRef*] pointer + bytecodeFileDef.methodRefCount);

		ClassDef* classDefTable = [ClassDef*] pointer;
		pointer = [uint8*] ([ClassDef*] pointer + bytecodeFileDef.classDefCount);

		FieldDef* fieldDefTable = [FieldDef*] pointer;
		pointer = [uint8*] ([FieldDef*] pointer + bytecodeFileDef.fieldDefCount);

		MethodDef* methodDefTable = [MethodDef*] pointer;
		pointer = [uint8*] ([MethodDef*] pointer + bytecodeFileDef.methodDefCount);

		PropertyDef* propertyDefTable = [PropertyDef*] pointer;
		pointer = [uint8*] ([PropertyDef*] pointer + bytecodeFileDef.propertyDefCount);

		/* Heaps */
		uint8* internalStringHeap = pointer;
		pointer = pointer + bytecodeFileDef.internalStringHeapSize;

		uint8* stringHeap = pointer;
		pointer = pointer + bytecodeFileDef.stringHeapSize;

		uint8* typeHeap = pointer;
		pointer = pointer + bytecodeFileDef.typeHeapSize;

		uint8* codeHeap = pointer;
		pointer = pointer + bytecodeFileDef.codeHeapSize;

		/* Resolving */
		ResolveInternalString(bytecodeFileDef.internalStringCount, internalStringIndexTable, internalStringHeap);
		ResolveString(bytecodeFileDef.stringCount, stringIndexTable, stringHeap);
	}

	public ResolveInternalString(int32 count, int32* index, uint8* heap)
	{
		Encoding encoding = new Encoding(65001);
		internalStringTable = new String[count];

		int buffer = Memory.AllocateMemory(1024); /* TODO: This should be enough for now */
		for (int32 i = 0; i < count; i = i + 1)
		{
			InternalStringRef *ref = [InternalStringRef*] (heap + *index);
			int32 length = encoding.FromBytes(buffer, 512, &ref.data, ref.length);
			internalStringTable[i] = String.FromCharBuffer(buffer, length);

			index = index + 1;
		}
		Memory.FreeMemory(buffer);
	}

	public ResolveString(int32 count, int32* index, uint8* heap)
	{
		stringTable = new String[count];
		for (int32 i = 0; i < count; i = i + 1)
		{
			StringRef *ref = [StringRef*] (heap + *index);
			stringTable[i] = String.FromCharBuffer(&ref.data, ref.length);

			index = index + 1;
		}
	}
}
