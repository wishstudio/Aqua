class Hash
{
	/* Simple multimap implementation */
	private Vector keys, values;

	public .ctor()
	{
		keys = new Vector();
		values = new Vector();
	}

	public Add(Core.String key, Core.Object value)
	{
		keys::Add([Core.Object] key);
		values::Add(value);
	}

	public Contains(Core.String key) -> int32 found, Core.Object value
	{
		for (int32 i = 0; i < keys::size; i = i + 1)
			if (([Core.String] keys[i])::Equals(key) > 0)
				return 1, values[i];
		return 0, null;
	}

	public FindAll(Core.String key) -> Vector
	{
		Vector ret = new Vector();
		for (int32 i = 0; i < keys::size; i = i + 1)
			if (([Core.String] keys[i])::Equals(key) > 0)
				ret::Add(values[i]);
		return ret;
	}

	public static [] (Hash hash, Core.String key) -> Core.Object
	{
		int32 found;
		Core.Object value;
		if ((found, value = hash::Contains(key)) > 0)
			return value;
		throw new Core.KeyNotFoundException();
	}

	public int32 Size
	{
		get { return keys::Size; }
	}
}
