class Vector
{
	private int32 capacity, size;
	private Core.Object[] elements;

	public ()
	{
		capacity = 4;
		size = 0;
		elements = new Core.Object[capacity];
	}

	private Grow()
	{
		capacity = capacity * 2;
		Core.Object[] e = new Core.Object[capacity];
		Core.Native.Memory::CopyMemory(&e[0], &elements[0], size * 4); /* HACK: sizeof(Core.Object) */
		elements = e;
	}

	public static [] (Vector vector, int32 index) -> Core.Object
	{
		if (index < 0 || index >= size)
			throw new Core.IndexOutOfBoundException();
		return vector::elements[index];
	}

	public Set(int32 index, Core.Object object)
	{
		if (index < 0 || index >= size)
			throw new Core.IndexOutOfBoundException();
		elements[index] = object;
	}

	public Add(Core.Object object)
	{
		if (size == capacity)
			Grow();
		elements[size] = object;
		size = size + 1;
	}

	public int32 Size
	{
		get { return size; }
	}
}
