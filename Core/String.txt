namespace Core;

using Core.Native;

class String
{
	private internal int32 length;
	private internal char firstChar;

	private static internal AllocateString(int32 length) -> String;

	private static CopyStringData(String dest, int32 destPos, String source, int32 sourcePos, int32 length)
	{
		Memory.CopyMemory(dest.RawData + destPos * 2, source.RawData + sourcePos * 2, length * 2);
	}

	public static FromCharBuffer(int buffer, int32 length) -> String
	{
		String ret = String.AllocateString(length);
		Memory.CopyMemory(&ret.firstChar, buffer, length * 2);
		return ret;
	}

	public AppendChar(char ch) -> String
	{
		String ret = String.AllocateString(length + 1);
		Memory.CopyMemory(&ret.firstChar, &firstChar, length * 2);
		*([int] &ret.firstChar + length * 2) = ch;
		return ret;
	}

	public Equals(String right) -> int32
	{
		if (length != right.length)
			return 0;
		int rawLeft = &firstChar, rawRight = &right.firstChar;
		for (int32 i = 0; i < length; i = i + 1)
		{
			if ([int32] *rawLeft != [int32] *rawRight)
				return 0;
			rawLeft = rawLeft + 2;
			rawRight = rawRight + 2;
		}
		return 1;
	}

	public SubString(int32 offset, int32 length) -> String
	{
		if (offset < 0 || offset >= this.length)
			throw new IndexOutOfBoundException();
		if (length > this.length - offset)
			length = this.length - offset;
		return String.FromCharBuffer([int] &firstChar + offset * 2, length);
	}

	public CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count)
	{
		Memory.CopyMemory(&destination[destinationIndex], [int] &firstChar + sourceIndex * 2, count * 2);
	}

	public static + (String left, String right) -> String
	{
		String ret = String.AllocateString(left.Length + right.Length);
		CopyStringData(ret, 0, left, 0, left.Length);
		CopyStringData(ret, left.Length, right, 0, right.Length);
		return ret;
	}

	public static + (String left, int32 right) -> String
	{
		return left + Int32.ToString(right);
	}

	public static + (int32 left, String right) -> String
	{
		return Int32.ToString(left) + right;
	}

	public static [] (String string, int32 index) -> char
	{
		return *([int] &string.firstChar + index * 2);
	}

	public int32 Length
	{
		get { return length; }
	}

	public int RawData
	{
		get { return &firstChar; }
	}
}
