namespace Core;

using Core.Native;

class String: IHashable
{
	private internal int32 size;
	private internal uint8 firstByte;

	private static internal AllocateString(int32 size) -> String;

	public static FromCharBuffer(int buffer, int32 size) -> String
	{
		String ret = String.AllocateString(size);
		Memory.CopyMemory(&ret.firstByte, buffer, size);
		return ret;
	}

	public override Equals(Object x) -> bool
	{
		String right = [String] x;
		if (size != right.size)
			return 0;
		int rawLeft = &firstByte, rawRight = &right.firstByte;
		for (int32 i = 0; i < size; i = i + 1)
		{
			if ([int32] *rawLeft != [int32] *rawRight)
				return 0;
			rawLeft = rawLeft + 1;
			rawRight = rawRight + 1;
		}
		return 1;
	}
	
	public CopyTo(int32 sourceIndex, uint8[] destination, int32 destinationIndex) -> int32
	{
		int32 srcCount = size - sourceIndex;
		int32 dstCount = destination.Length - destinationIndex;
		int32 count;
		if (srcCount <= dstCount)
			count = srcCount;
		else
		{
			count = dstCount;
			/* TODO: Determine break point */
		}
		Memory.CopyMemory(&destination[destinationIndex], [int] &firstByte + sourceIndex, count);
		return count;
	}

	public static + (String left, String right) -> String
	{
		String ret = String.AllocateString(left.size + right.size);
		Memory.CopyMemory(&ret.firstByte, &left.firstByte, left.size);
		Memory.CopyMemory(&ret.firstByte + left.size, &right.firstByte, right.size);
		return ret;
	}

	public static + (String left, int32 right) -> String
	{
		return left + Int32.ToString(right);
	}

	public static + (int32 left, String right) -> String
	{
		return Int32.ToString(left) + right;
	}

	public static + (String left, char ch) -> String
	{
		String ret = AllocateString(size + 1);
		Memory.CopyMemory(&ret.firstByte, &firstByte, size);
		*([int] &ret.firstByte + size) = ch;
		return ret;
	}

	public int32 Size
	{
		get { return size; }
	}

	public uint8* RawData
	{
		get { return &firstByte; }
	}
}
