namespace Core;

using Core.Native;

class Encoding
{
	int32 codePage;

	public (int32 codePage)
	{
		this.codePage = codePage;
	}

	/* Only UTF-8 implemented now */
	public ToBytes(uint8[] text, int32 size, uint8[] buffer) -> int32
	{
		int32 count = Math.Min(size, buffer.Length);
		Memory.CopyMemory(&buffer[0], &text[0], count);
		return count;
	}

	/* Only UTF-8 implemented now */
	public FromBytes(char[] buffer, uint8[] bytes, int32 length) -> int32
	{
		return Win32.MultiByteToWideChar(codePage, 0, &bytes[0], length, &buffer[0], buffer.Length);
	}

	public FromBytes(int buffer, int32 bufferLength, int bytes, int32 length) -> int32
	{
		return Win32.MultiByteToWideChar(codePage, 0, bytes, length, buffer, bufferLength);
	}

	public GetMaxByteLength(int32 maxCharLength) -> int32
	{
		return maxCharLength * 2;
	}
}
